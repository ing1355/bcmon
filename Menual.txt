apt-get update
apt-get install sudo
sudo apt-get install nodejs
sudo apt-get install npm
sudo npm install -g npm (npm update)
npm install (in root directory)
npm start (in root directory) - Port is 8000

맨 처음 맨땅 도커 컨테이너 시작 시 위의 명령어 순으로 입력하면
실행 가능

Root Directory 기준.

/config - 각 환경변수 설정 파일들 및 전역 셋팅 관리 파일
대부분 웹앱 생성 시 기본적으로 생성되는 파일들.(건드리면 지옥)
플러그인 쪽은 웬만하면 절대 건드릴 일 없음.

건드릴 부분은 router.config.js 부분으로

/config/router.config.js

앱 실행 시 맨 윗단 4-8 라인의 컴포넌트로 라우팅 후
8 line의 routes 에 Array 형태로 사이드 메뉴의 Array 입력.
기본적으로 path, name, icon, component 입력.
path = 실제 컴포넌트 접근 url
name = View 단에서 메뉴상에 띄워지는 이름
icon = 마찬가지로 View 단에서 메뉴상에 띄워지는 아이콘(antd 홈페이지에 아이콘 종류 있습니다.)
component = 절대경로던 상대경로던, 해당 메뉴 클릭 시 Content 파트에 띄울 Component 지정

/mock/route.js

이 파일은 antd-pro 라이브러리 기본 설정과 연동되어있어 건드리면 지옥. Don't Touch

/public
다른거 필요없고 favicon.png만 보시면 됩니다.
html상에서 title부분의 아이콘에 적용할 이미지 입니다.

/src(이제부턴 양이 많으므로 /src를 기준으로 하겠습니다.)

/components
각종 antd-pro 라이브러리의 기본 제공 Component들이 담겨있습니다.

/components/Authorized
건드릴 일 없을겁니다.
라우팅이 실제로 처리되는 부분 구현되는 곳이 여기입니다.
원래는 계정 연동 및 Notice 처리등등 까지 있었지만 해당 기능은
필요 없다고 하여 라우팅 부분만 남겨놓았습니다.

/components/Errors
잘못된 접근에 대한 페이지 처리 컴포넌트입니다.(404)

/components/Exception
예외처리에 관련된 코드가 담겨있습니다.
실제로 웹 사용 시 일어나지 않을 일들에 대해 정의해놓았지만
다른 코드들과 엮여있으므로 건드리면 지옥.

/components/GlobalFooter
실제 html상에서 Footer에 해당하는 부분을 정의한 코드.
구체적인 내용은 뒤에 layouts디렉토리의 Footer에서 살을 입히며
여기는 Footer의 뼈대입니다. 건드릴 일 없습니다.

/components/GlobalHeader
마찬가지로 html상에서 Header에 해당하는 부분의 뼈대입니다.
menu drawer의 fold, unfold 등 collapsed 상태 관리를 담당하고 있으며
drawer 변경 시 Contents 파트의 사이즈 변화를 담당합니다.

/components/PageHeaderWrapper
위의 GlobalHeader에서 Layout에 관련된 내용이 담겨있는 파일입니다.
구체적인 Layout 내용이 담겨있습니다.

/components/PageLoading
컴포넌트 로딩중 나타날 창을 정의해놓은 것입니다.

/component/SiderMenu
기본 제공 컴포넌트 중 가장 중요한 녀석입니다.
좌측 메뉴의 상태를 관리하는 녀석이며
위에 전역으로 셋팅된 설정파일들(router.config.js 등)과 연동되어
전역적으로 관리되는 변수들에 접근하여
메뉴를 띄워주는 컴포넌트 입니다.

/layouts
html 기준으로 Header와 Contents, Footer를 정의한 디렉토리입니다.
각 Header와 Footer의 컴포넌트가 정의되어 있고 Contents 부분은
antd 라이브러리에서 정의한 기준을 따르고 있습니다.
BasicLayout 컴포넌트의 하위로 Content, Header, Footer가 들어가있습니다.

/locales
원래 언어 변환기로서 역할을 하였지만 필요하지 않은 기능이라 컴파일만
돌아가도록 남겨놓았습니다.

/models
여러 전역 기능들에 대한 정의입니다.
global은 현재는 Menu Drawer의 Collapsed(fold/unfold)에 대한 변수와
함수가 정의되어 있습니다.
menu는 실제 Menu Drawer의 구성에서 Item들을 관리해줍니다.
setting은 각 컴포넌트들의 기본 설정 값들의 index.js 라고 보시면 됩니다.

/pages

/pages/.umi
각 환경변수들에 대한 함수입니다.
건드릴 일이 없을 것이며, 라우팅에 대한 hot replacement, 각 모델 접근,
전역 변수 관리, 언어 변환 등 전역 셋팅 실제 동작을 담당합니다.

/pages/Components

/function

/Chart
Chart 페이지에서 Card(틀)를 포함한 그래프 렌더링까지 담당하는 컴포넌트
입니다. collection name과 날짜 parameter로 해당 콜렉션에서 해당 날짜
범위의 데이터를 가져와 그래프로 출력합니다. findMin과 findMax로 최소값
및 최대값을 구하여 그래프의 x축 범위도 조절하여 줍니다.

/Clustering
Clustering 페이지를 구성하는 컴포넌트들을 모아놓은 디렉토리입니다.
위에서 아래 순으로 Chart, Table1, Table2, Table3입니다.
DatePicker 및 데이터의 방향성과 전역성을 위해 상위 컴포넌트인 Clustering
Page 컴포넌트에서 Data Fetch를 하여 Chart와 Table들에 뿌려주게 됩니다.
Table3의 Filter와 Schema 같은 경우 Table_data로 따로 정의해놓았습니다.

/Detection
Ddos Detection 페이지를 구성하는 컴포넌트들을 모아놓은 디렉토리입니다.
Description을 제외한 컴포넌트들이 담겨있습니다.
best model을 제외한 나머지는 상위 컴포넌트에서 Data를 받아옵니다.
마찬가지로 model_data로 Schema를 정의해놓았습니다.

/Home
초기 구상대로 레이아웃을 잡아놓았으나 현재 어떤 Data를 넣을지 정해지지
않아 초기 구상 그대로 입니다.

/Prediction
Transaction Prediction 페이지를 구성하는 컴포넌트들을 모아놓은 디렉토리
입니다. 순서대로 Chart, Table1, Table2, Table3인데 Table1은 아직 데이터가
없어 구현이 되지 않은 상태입니다.

/Pages

Analysis_Clustering
Clustering 페이지 컴포넌트 입니다.
전체 Chart와 Table Data 및 Loading은 현재 컴포넌트의 State로 관리되며
DatePicker를 위해 Constructor(생성자)로 State 정의 및 Data Fetch가 한번
이루어지게 됩니다. 기준은 가장 최신 데이터를 뽑아오는 것이며
axios가 Data Fetch를 담당하는 함수 입니다.
그 후 DatePicker에 변화가 생길때 마다 dateChange 함수가 작동하여
Data Fetch를 재실행하고 State에 변화를 주어 Rerendering이 작동하고
차트와 테이블을 다시 그리는 형태가 됩니다.
Filter도 마찬가지로 Filter 선택시마다 onChange가 작동하며 해당 Value로
Table의 Schema를 재정의 합니다.

Analysis_Detection
Ddos Detection 페이지 컴포넌트 입니다.
timeConverter는 timestamp값을 YYYY-MM-DD 형태로 바꾸어줍니다.
마찬가지로 각 Data와 Loading은 State로 관리되며 컴포넌트 생성시에
1번 Data Fetch가 이루어집니다. 

Analysis_Prediction
Transaction Prediction 페이지 컴포넌트 입니다.
다른 페이지들과 마찬가지로 Data와 Loading이 State로 관리됩니다.
ComponentDidMount(컴포넌트생성완료시기) 때에 Data Fetch가 이루어집니다.

Chart
위에서 언급했던 Function의 GetChartData에 Collection name parameter를
넘겨주고 해당 레이아웃을 잡아준 Chart 페이지 컴포넌트입니다.

Home
Home 페이지 컴포넌트입니다. 아직 별다른 기능은 없습니다.